filter {
  #Filer nginx access files
  #benmatheja.de 157.55.39.209 - - [09/Sep/2017:20:29:39 +0200] "GET /2014/03/facebook-ermoeglicht-impressum-fuer-pages/ HTTP/1.1" 200 1631 "-" "Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)"
  if [type] == "nginx_access" {
    grok {
      match => { "message" => "%{COMBINEDAPACHELOG}" }
    }
    geoip {
      source => "clientip"
    }
  }

  # Parse nginx error Files
  #2017/09/09 20:32:49 [error] 1468#1468: *1282 connect() failed (111: Connection refused) while connecting to upstream, client: 87.183.248.87, server: ea.benmatheja.de, request: "GET /app/kibana HTTP/1.1", upstream: "http://[::1]:5601/app/kibana", host: "ea.benmatheja.de", referrer: "https://ea.benmatheja.de/"
  if [type] == "nginx_error" {
    grok {
      match => { "message" => "(?<timestamp>%{YEAR}[./-]%{MONTHNUM}[./-]%{MONTHDAY}[- ]%{TIME}) \[%{LOGLEVEL:severity}\] %{POSINT:pid}#%{NUMBER}: %{GREEDYDATA:errormessage}(?:, client: (?<client>%{IP}|%{HOSTNAME}))(?:, server: %{IPORHOST:server})(?:, request: %{QS:request})?(?:, upstream: \"%{URI:upstream}\")?(?:, host: %{QS:host})?(?:, referrer: \"%{URI:referrer}\")"
       }
    }
    #date {
      #match => { "timestamp" =>  "YYYY/MM/dd HH:mm:ss" }
      #remove_field =>  "timestamp" 
    #}
    geoip {
      source => "client"
    }
  }
  # Sep  9 20:45:01 srv2 CRON[16557]: pam_unix(cron:session): session opened for user www-data by (uid=0)
  #Parse Syslog Files
  if [type] == "linux-syslog" {
    grok {
      match => { "message" => "%{SYSLOGBASE}" }
    }
  }
  # {"reqId":"xljbU8oJF1fvyNGvLtuP","remoteAddr":"","app":"files_versions","message":"Expire: \/Projects\/Workspace\/ea-logstash\/conf.d\/first-pipeline.conf.v1504981805","level":1,"time":"2017-09-09T20:45:02+02:00","method":"--","url":"--","user":"--"}
  if [type] == "owncloud-log" {
    json {
      source => "message"
    }
  }

  # 2017-09-09 19:46:35,918 - app - DEBUG - 1855589 - 87.183.248.87,127.0.0.1 - handle_event - 1151 - processing - Reading Payload
  if [type] == "todoist-flask-log" {
    grok {
      match => { "message" => "%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{HOUR}:%{MINUTE}:%{SECOND} - app - %{LOGLEVEL} - %{UUID:traceid} - %{IPV4:clientip} - %{DATA:function} - %{NUMBER:processingtime:int} - %{DATA:status} - %{GREEDYDATA:message}" }
    }
  }

}
